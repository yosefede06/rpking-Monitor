import numpy as np  # Import numpy for numerical operations
import plotly.graph_objects as go

batch_labels = ['2024-01-01 07:00', '2024-01-01 08:00', '2024-01-01 09:00', '2024-01-01 10:00', '2024-01-01 11:00', '2024-01-01 12:00', '2024-01-01 13:00', '2024-01-01 14:00', '2024-01-01 15:00', '2024-01-01 16:00', '2024-01-01 17:00', '2024-01-01 18:00', '2024-01-01 19:00', '2024-01-01 20:00', '2024-01-01 21:00', '2024-01-01 22:00', '2024-01-01 23:00', '2024-01-02 00:00', '2024-01-02 01:00', '2024-01-02 02:00', '2024-01-02 03:00', '2024-01-02 04:00', '2024-01-02 05:00', '2024-01-02 06:00', '2024-01-02 07:00', '2024-01-02 08:00', '2024-01-02 09:00', '2024-01-02 10:00', '2024-01-02 11:00', '2024-01-02 12:00', '2024-01-02 13:00', '2024-01-02 14:00', '2024-01-02 15:00', '2024-01-02 16:00', '2024-01-02 17:00', '2024-01-02 18:00', '2024-01-02 19:00', '2024-01-02 20:00', '2024-01-02 21:00', '2024-01-02 22:00', '2024-01-02 23:00', '2024-01-03 00:00', '2024-01-03 01:00', '2024-01-03 02:00', '2024-01-03 03:00', '2024-01-03 04:00', '2024-01-03 05:00', '2024-01-03 06:00', '2024-01-03 07:00', '2024-01-03 08:00', '2024-01-03 09:00', '2024-01-03 10:00', '2024-01-03 11:00', '2024-01-03 12:00', '2024-01-03 13:00', '2024-01-03 14:00', '2024-01-03 15:00', '2024-01-03 16:00', '2024-01-03 17:00', '2024-01-03 18:00', '2024-01-03 19:00', '2024-01-03 20:00', '2024-01-03 21:00', '2024-01-03 22:00', '2024-01-03 23:00', '2024-01-04 00:00', '2024-01-04 01:00', '2024-01-04 02:00', '2024-01-04 03:00', '2024-01-04 04:00', '2024-01-04 05:00', '2024-01-04 06:00', '2024-01-04 07:00', '2024-01-04 08:00', '2024-01-04 09:00', '2024-01-04 10:00', '2024-01-04 11:00', '2024-01-04 12:00', '2024-01-04 13:00', '2024-01-04 14:00', '2024-01-04 15:00', '2024-01-04 16:00', '2024-01-04 17:00', '2024-01-04 18:00', '2024-01-04 19:00', '2024-01-04 20:00', '2024-01-04 21:00', '2024-01-04 22:00', '2024-01-04 23:00', '2024-01-05 00:00', '2024-01-05 01:00', '2024-01-05 02:00', '2024-01-05 03:00', '2024-01-05 04:00', '2024-01-05 05:00', '2024-01-05 06:00', '2024-01-05 07:00', '2024-01-05 08:00', '2024-01-05 09:00', '2024-01-05 10:00', '2024-01-05 11:00', '2024-01-05 12:00', '2024-01-05 13:00', '2024-01-05 14:00', '2024-01-05 15:00', '2024-01-05 16:00', '2024-01-05 17:00', '2024-01-05 18:00', '2024-01-05 19:00', '2024-01-05 20:00', '2024-01-05 21:00', '2024-01-05 22:00', '2024-01-05 23:00', '2024-01-06 00:00', '2024-01-06 01:00', '2024-01-06 02:00', '2024-01-06 03:00', '2024-01-06 04:00', '2024-01-06 05:00', '2024-01-06 06:00', '2024-01-06 07:00', '2024-01-06 08:00', '2024-01-06 09:00', '2024-01-06 10:00', '2024-01-06 11:00', '2024-01-06 12:00', '2024-01-06 13:00', '2024-01-06 14:00', '2024-01-06 15:00', '2024-01-06 16:00', '2024-01-06 17:00', '2024-01-06 18:00', '2024-01-06 19:00', '2024-01-06 20:00', '2024-01-06 21:00', '2024-01-06 22:00', '2024-01-06 23:00', '2024-01-07 00:00', '2024-01-07 01:00', '2024-01-07 02:00', '2024-01-07 03:00', '2024-01-07 04:00', '2024-01-07 05:00', '2024-01-07 06:00', '2024-01-07 07:00', '2024-01-07 08:00', '2024-01-07 09:00', '2024-01-07 10:00', '2024-01-07 11:00', '2024-01-07 12:00', '2024-01-07 13:00', '2024-01-07 14:00', '2024-01-07 15:00', '2024-01-07 16:00', '2024-01-07 17:00', '2024-01-07 18:00', '2024-01-07 19:00', '2024-01-07 20:00', '2024-01-07 21:00', '2024-01-07 22:00', '2024-01-07 23:00', '2024-01-08 00:00', '2024-01-08 01:00', '2024-01-08 02:00', '2024-01-08 03:00', '2024-01-08 04:00', '2024-01-08 05:00', '2024-01-08 06:00', '2024-01-08 07:00', '2024-01-08 08:00', '2024-01-08 09:00', '2024-01-08 10:00', '2024-01-08 11:00', '2024-01-08 12:00', '2024-01-08 13:00', '2024-01-08 14:00', '2024-01-08 15:00', '2024-01-08 16:00', '2024-01-08 17:00', '2024-01-08 18:00', '2024-01-08 19:00', '2024-01-08 20:00', '2024-01-08 21:00', '2024-01-08 22:00', '2024-01-08 23:00', '2024-01-09 00:00', '2024-01-09 01:00', '2024-01-09 02:00', '2024-01-09 03:00', '2024-01-09 04:00', '2024-01-09 05:00', '2024-01-09 06:00', '2024-01-09 07:00', '2024-01-09 08:00', '2024-01-09 09:00', '2024-01-09 10:00', '2024-01-09 11:00', '2024-01-09 12:00', '2024-01-09 13:00', '2024-01-09 14:00', '2024-01-09 15:00', '2024-01-09 16:00', '2024-01-09 17:00', '2024-01-09 18:00', '2024-01-09 19:00', '2024-01-09 20:00', '2024-01-09 21:00', '2024-01-09 22:00', '2024-01-09 23:00', '2024-01-10 00:00', '2024-01-10 01:00', '2024-01-10 02:00', '2024-01-10 03:00', '2024-01-10 04:00', '2024-01-10 05:00', '2024-01-10 06:00', '2024-01-10 07:00', '2024-01-10 08:00', '2024-01-10 09:00', '2024-01-10 10:00', '2024-01-10 11:00', '2024-01-10 12:00', '2024-01-10 13:00', '2024-01-10 14:00', '2024-01-10 15:00', '2024-01-10 16:00', '2024-01-10 17:00', '2024-01-10 18:00', '2024-01-10 19:00', '2024-01-10 20:00', '2024-01-10 21:00', '2024-01-10 22:00', '2024-01-10 23:00', '2024-01-11 00:00', '2024-01-11 01:00', '2024-01-11 02:00', '2024-01-11 03:00', '2024-01-11 04:00', '2024-01-11 05:00', '2024-01-11 06:00', '2024-01-11 07:00', '2024-01-11 08:00', '2024-01-11 09:00', '2024-01-11 10:00', '2024-01-11 11:00', '2024-01-11 12:00', '2024-01-11 13:00', '2024-01-11 14:00', '2024-01-11 15:00', '2024-01-11 16:00', '2024-01-11 17:00', '2024-01-11 18:00', '2024-01-11 19:00', '2024-01-11 20:00', '2024-01-11 21:00', '2024-01-11 22:00', '2024-01-11 23:00', '2024-01-12 00:00', '2024-01-12 01:00', '2024-01-12 02:00', '2024-01-12 03:00', '2024-01-12 04:00', '2024-01-12 05:00', '2024-01-12 06:00', '2024-01-12 07:00', '2024-01-12 08:00', '2024-01-12 09:00', '2024-01-12 10:00', '2024-01-12 11:00', '2024-01-12 12:00', '2024-01-12 13:00', '2024-01-12 14:00', '2024-01-12 15:00', '2024-01-12 16:00', '2024-01-12 17:00', '2024-01-12 18:00', '2024-01-12 19:00', '2024-01-12 20:00', '2024-01-12 21:00', '2024-01-12 22:00', '2024-01-12 23:00', '2024-01-13 00:00', '2024-01-13 01:00', '2024-01-13 02:00', '2024-01-13 03:00', '2024-01-13 04:00', '2024-01-13 05:00', '2024-01-13 06:00', '2024-01-13 07:00', '2024-01-13 08:00', '2024-01-13 09:00', '2024-01-13 10:00', '2024-01-13 11:00', '2024-01-13 12:00', '2024-01-13 13:00', '2024-01-13 14:00', '2024-01-13 15:00', '2024-01-13 16:00', '2024-01-13 17:00', '2024-01-13 18:00', '2024-01-13 19:00', '2024-01-13 20:00', '2024-01-13 21:00', '2024-01-13 22:00', '2024-01-13 23:00', '2024-01-14 00:00', '2024-01-14 01:00', '2024-01-14 02:00', '2024-01-14 03:00', '2024-01-14 04:00', '2024-01-14 05:00', '2024-01-14 06:00', '2024-01-14 07:00']
new_batch_labels = []
curr = []
for i in range(len(batch_labels)):
    if i % 24 == 23:
        new_batch_labels.append(max(curr))
        curr = []
    curr.append(batch_labels[i])
counter = 0
max_counts = [61920, 534952, 298780, 926541, 947585, 955020, 278340, 46908, 97468, 296142, 274846, 615867, 98570, 889700, 97500, 945514, 101051, 702476, 277788, 61989, 96984, 811703, 182575, 278020, 61227, 64234, 394760, 253864, 63490, 690991, 189984, 297929, 123636, 62456, 96366, 520158, 37817, 96991, 279542, 408590, 812137, 62175, 71494, 650358, 68881, 209418, 908392, 190588, 920653, 124216, 69271, 916384, 942358, 257376, 63018, 279394, 303320, 304830, 85834, 124010, 67881, 233380, 920743, 530416, 929691, 1880291, 613354, 405292, 78366, 433812, 205712, 808112, 99638, 275046, 105922, 166854, 224596, 167232, 545232, 221919, 271285, 211600, 829161, 284982, 74722, 277996, 47404, 476978, 168884, 321630, 130622, 539789, 73756, 504420, 57112, 341664, 196442, 265008, 166238, 173222, 1099065, 171372, 79402, 174982, 329125, 56544, 1071726, 1600576, 1069642, 65886, 537777, 2653211, 1073225, 565203, 1091774, 542791, 553255, 1077450, 537059, 1599448, 1074957, 163636, 1833704, 1073913, 2654374, 2651182, 564577, 1607382, 933631, 553231, 1616731, 1091296, 61649, 1083452, 2657190, 1598265, 1622353, 1065840, 1595882, 1150618, 2046621, 969500, 113409, 33346, 55296, 1596959, 2126353, 555084, 2652666, 1068412, 564076, 553009, 908222, 547207, 1064449, 63222, 286104, 264290, 318126, 59302, 330028, 1857811, 296602, 101623, 363974, 648542, 117739, 282104, 488972, 561606, 472446, 1798535, 80552, 346388, 102844, 275010, 177836, 77392, 91284, 289214, 99147, 440332, 367179, 88782, 90013, 116417, 281752, 102180, 724466, 61723, 181040, 974588, 67261, 72218, 75729, 108854, 886621, 94939, 315054, 473616, 354784, 285450, 90700, 745933, 590044, 310854, 453827, 535720, 287656, 285318, 336112, 634184, 192912, 78905, 49603, 301420, 708683, 327892, 572620, 103300, 2026105, 685347, 195698, 717716, 759155, 1085369, 872700, 266818, 709990, 278136, 76363, 287800, 151095, 373917, 95624, 390898, 373176, 382964, 341086, 1027242, 688469, 93362, 128852, 89969, 748003, 212562, 573542, 265016, 86183, 277125, 518145, 744919, 477804, 148230, 555076, 429846, 99887, 524382, 95669, 86492, 424475, 735509, 601013, 179360, 155224, 118643, 92917, 194204, 88304, 785232, 88400, 806926, 88215, 90093, 97685, 90342, 272758, 92212, 86175, 83913, 85895, 157046, 163324, 160380, 274352, 158704, 160256, 95500, 276100, 734130, 257090, 143814, 163424, 416671, 849758, 191578, 283744, 101970, 120782, 281710, 709879, 730705, 545038, 1363247, 101881, 98050, 81608, 698731, 141300, 486923, 90167, 92944, 104174]
new_max_counts = []
for i in range(len(max_counts)):
    if i % 24 == 23:
        new_max_counts.append(counter)
        counter = 0
    counter += max_counts[i]

transformed_max_counts = [2**np.ceil(np.log2(count)) if count > 0 else 1 for count in new_max_counts]

# Creating the plot
fig = go.Figure()

# Add trace
fig.add_trace(go.Scatter(x=new_batch_labels, y=transformed_max_counts, mode='lines+markers', name='Max Count'))

# Update layout for a better visual representation, correcting the logarithmic scale setup
fig.update_layout(
    title='Max AS Pair Counts per Time Batch (2^n Scale)',
    xaxis_title='Time Batch',
    yaxis_title='Max Element Count (2^n)',
    yaxis=dict(
        type='log',
        autorange=True,
        tickvals=[2**i for i in range(int(np.log2(min(transformed_max_counts))), int(np.ceil(np.log2(max(transformed_max_counts)))) + 1)],
        ticktext=[f'2^{i}' for i in range(int(np.log2(min(transformed_max_counts))), int(np.ceil(np.log2(max(transformed_max_counts)))) + 1)]
    ),
    xaxis=dict(tickmode='auto', nticks=len(new_batch_labels), tickangle=-45),
    paper_bgcolor="LightSteelBlue", margin=dict(l=20, r=20, t=40, b=20),
)
# Rotate labels to avoid overlap
fig.update_xaxes(tickangle=45)
fig.show()